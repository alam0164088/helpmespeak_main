# payment/views.py (IAP specific views)

import requests
import json # JSON Parsing ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§
from datetime import datetime
from rest_framework import views, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.shortcuts import get_object_or_404
from django.conf import settings
from django.utils.timezone import make_aware
from rest_framework import generics

# Google Auth Libraries for production (‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶è‡¶á‡¶ó‡ßÅ‡¶≤‡ßã ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá)
# from google.oauth2 import service_account
# import google.auth.transport.requests

from .models import Plan, Subscription
from .serializers import IAPValidateSerializer, PlanSerializer
# ... (‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶Ø‡ßá‡¶Æ‡¶® generics, status) ...

APPLE_VERIFY_URL = "https://buy.itunes.apple.com/verifyReceipt"
APPLE_SANDBOX_VERIFY_URL = "https://sandbox.itunes.apple.com/verifyReceipt"
GOOGLE_API_URL = "https://androidpublisher.googleapis.com/androidpublisher/v3/applications/"


class PlanListView(generics.ListAPIView):
    """GET /api/payment/plans/ - IAP ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶π ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶´‡ßç‡¶∞‡¶®‡ßç‡¶ü‡¶è‡¶®‡ßç‡¶°‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§"""
    # ‡¶è‡¶ñ‡¶® models.py ‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶è‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
    queryset = Plan.objects.filter(is_active=True).all() 
    serializer_class = PlanSerializer

class IAPValidateView(views.APIView):
    """
    POST /api/payment/iap/validate/
    ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶∞‡¶∏‡¶ø‡¶¶/‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡•§
    """
    permission_classes = [IsAuthenticated]
    
    def post(self, request, *args, **kwargs):
        serializer = IAPValidateSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        token = serializer.validated_data['token']
        platform = serializer.validated_data['platform']
        product_id = serializer.validated_data['product_id']

        if platform == 'apple':
            return self._validate_apple_receipt(request.user, token, product_id)
        elif platform == 'google':
            return self._validate_google_token(request.user, token, product_id)
        
        return Response({"error": "Invalid platform specified."}, status=status.HTTP_400_BAD_REQUEST)

    # ... ( _validate_apple_receipt ‡¶è‡¶¨‡¶Ç _validate_google_token ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ...

    # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ _validate_apple_receipt ‡¶è‡¶¨‡¶Ç _validate_google_token ‡¶ï‡ßã‡¶° ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®

    # ‡¶®‡¶§‡ßÅ‡¶® _get_google_access_token ‡¶≤‡¶ú‡¶ø‡¶ï
    def _get_google_access_token(self):
        """
        Google Service Account ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶®‡¶ü‡¶æ‡¶á‡¶Æ‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§
        ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§
        """
        # üö® ‡¶Ø‡¶¶‡¶ø google-auth ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßá‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡¶æ‡¶∞‡¶ø ‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® üö®
        if not hasattr(settings, 'GOOGLE_SERVICE_ACCOUNT_FILE'):
            # ‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶°‡¶æ‡¶Æ‡¶ø ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶´‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶® (‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
            print("WARNING: GOOGLE_SERVICE_ACCOUNT_FILE not set. Using dummy token.")
            return "DUMMY_GOOGLE_ACCESS_TOKEN" 
        
        # üöß ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú‡ßá ‡¶≤‡¶æ‡¶ó‡¶æ‡¶® üöß
        try:
            # Service Account Key ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶®‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶≤‡ßã‡¶°
            credentials = service_account.Credentials.from_service_account_file(
                settings.GOOGLE_SERVICE_ACCOUNT_FILE,
                scopes=['https://www.googleapis.com/auth/androidpublisher']
            )
            
            # ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶è‡¶¨‡¶Ç ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶®
            request = google.auth.transport.requests.Request()
            credentials.refresh(request)
            return credentials.token
            
        except Exception as e:
            print(f"Google Auth Token Generation Failed: {e}")
            # ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
            return None # ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá None ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá
        
from .serializers import SubscriptionStatusSerializer # ‡¶è‡¶á ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®

class SubscriptionManageView(generics.RetrieveUpdateAPIView):
    """
    GET /api/payment/subscription/manage/ : ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º‡•§
    PATCH/PUT /api/payment/subscription/manage/ : ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶¨‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
    """
    permission_classes = [IsAuthenticated]
    serializer_class = SubscriptionStatusSerializer

    def get_object(self):
        """
        ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶ü‡¶ø ‡¶´‡ßá‡¶∞‡ßé ‡¶¶‡ßá‡¶¨‡ßá‡•§ 
        ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá 404 ‡¶¶‡ßá‡¶¨‡ßá‡•§
        """
        # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶ü‡ßá‡¶®‡ßá ‡¶Ü‡¶®‡ßÅ‡¶®, ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá 404 ‡¶¶‡ßá‡¶¨‡ßá
        return get_object_or_404(Subscription, user=self.request.user)

    def update(self, request, *args, **kwargs):
        # ‚ö†Ô∏è ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§
        # ‡¶Ø‡ßá‡¶Æ‡¶®: request.data.get('action') == 'cancel' ‡¶π‡¶≤‡ßá API ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ‡•§
        instance = self.get_object()
        
        # ‡¶°‡¶æ‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶≤‡¶ú‡¶ø‡¶ï:
        if request.data.get('action') == 'cancel':
            instance.status = 'cancelled'
            instance.save()
            return Response({"message": "Subscription cancelled successfully."}, status=status.HTTP_200_OK)
            
        return super().update(request, *args, **kwargs)